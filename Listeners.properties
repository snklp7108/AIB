# Listener is an interface or set of methods and those method will be automatically triggered based on the result of Test Methods
# ItestListener methods are:-  onTestStart, onFinsh, onTestFailure, onTestSkipped, onTestStart, onTestSuccess 

Junit-5 
Dependencies need to add in pom.xml are 
1. junit-jupiter-api: -API for writing the test cases
2. junit-jupiter-engine:-Implementation of testEngine API for junit jupiter
3. junit-vintage-engine(Optional):-A thin layeron the top junit-4 to running vintage test

Junit-5 can be run as runner
JUnit 5 test classes and methods
The common test annotations used within a test class (imported from org.junit.jupiter.api) are:

@BeforeAll – executed before all methods in test lass
@BeforeEach – execute before each test method in test class
@Test – actual test method
@AfterEach – executed after each test method in test lass
@AfterAll – executed after all methods in test lass
Other basic but useful annotations:

@DisplayName – custom display name for test class or method
@Disabled – disabling test class or method
@RepeatedTest – make a test template out of the test method
@Tag – tag a test class or method for further test selection


For each and every page we create one sperate java file (On that java class we only write IDENTIFICATION methods)
e.g:- WebElement usname= driver.findElement(By.xpath("//input[text()='username']"));

We create Test-class(main class) :- from this particular class we will do OPERATION
e.g:- driver.findElement(By.xpath("//input[text()='username']")).sendkey("");

POM:- Maintaining and managing all the page objects in proper way or different files is a concept of POM. 

